{"ast":null,"code":"const handleCheckIn = async e => {\n  e.preventDefault();\n  if (flightNumber && lastName && passportNumber) {\n    try {\n      const response = await fetch(\"https://localhost:7239/api/CheckIn\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          IDZbor: parseInt(flightNumber),\n          IDClient: 1,\n          // aici trebuie să pui un client valid existent în DB\n          NrPasaport: parseInt(passportNumber),\n          TipBagaj: luggageOption || \"Fără bagaj\",\n          CheckedIN: true\n        })\n      });\n      if (!response.ok) {\n        throw new Error(\"Eroare la check-in\");\n      }\n      setCheckInStatus(\"Check-in reușit! Ai finalizat procedura de check-in.\");\n    } catch (err) {\n      console.error(err);\n      setCheckInStatus(\"A apărut o eroare la check-in.\");\n    }\n  } else {\n    setCheckInStatus(\"Te rugăm să completezi toate câmpurile.\");\n  }\n};","map":{"version":3,"names":["handleCheckIn","e","preventDefault","flightNumber","lastName","passportNumber","response","fetch","method","headers","body","JSON","stringify","IDZbor","parseInt","IDClient","NrPasaport","TipBagaj","luggageOption","CheckedIN","ok","Error","setCheckInStatus","err","console","error"],"sources":["C:/Users/Szilard/Documents/proi/ux-ui-frontpage/src/pages/CheckInPage.tsx"],"sourcesContent":["const handleCheckIn = async (e: React.FormEvent) => {\r\n  e.preventDefault();\r\n\r\n  if (flightNumber && lastName && passportNumber) {\r\n    try {\r\n      const response = await fetch(\"https://localhost:7239/api/CheckIn\", {\r\n        method: \"POST\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n        },\r\n        body: JSON.stringify({\r\n          IDZbor: parseInt(flightNumber),\r\n          IDClient: 1, // aici trebuie să pui un client valid existent în DB\r\n          NrPasaport: parseInt(passportNumber),\r\n          TipBagaj: luggageOption || \"Fără bagaj\",\r\n          CheckedIN: true,\r\n        }),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(\"Eroare la check-in\");\r\n      }\r\n\r\n      setCheckInStatus(\"Check-in reușit! Ai finalizat procedura de check-in.\");\r\n    } catch (err) {\r\n      console.error(err);\r\n      setCheckInStatus(\"A apărut o eroare la check-in.\");\r\n    }\r\n  } else {\r\n    setCheckInStatus(\"Te rugăm să completezi toate câmpurile.\");\r\n  }\r\n};\r\n"],"mappings":"AAAA,MAAMA,aAAa,GAAG,MAAOC,CAAkB,IAAK;EAClDA,CAAC,CAACC,cAAc,CAAC,CAAC;EAElB,IAAIC,YAAY,IAAIC,QAAQ,IAAIC,cAAc,EAAE;IAC9C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;QACjEC,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,MAAM,EAAEC,QAAQ,CAACX,YAAY,CAAC;UAC9BY,QAAQ,EAAE,CAAC;UAAE;UACbC,UAAU,EAAEF,QAAQ,CAACT,cAAc,CAAC;UACpCY,QAAQ,EAAEC,aAAa,IAAI,YAAY;UACvCC,SAAS,EAAE;QACb,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACb,QAAQ,CAACc,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,oBAAoB,CAAC;MACvC;MAEAC,gBAAgB,CAAC,sDAAsD,CAAC;IAC1E,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;MAClBD,gBAAgB,CAAC,gCAAgC,CAAC;IACpD;EACF,CAAC,MAAM;IACLA,gBAAgB,CAAC,yCAAyC,CAAC;EAC7D;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}