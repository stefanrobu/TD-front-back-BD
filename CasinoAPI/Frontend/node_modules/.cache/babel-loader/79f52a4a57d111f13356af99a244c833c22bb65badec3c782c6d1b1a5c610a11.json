{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Stefan Robu\\\\OneDrive\\\\Desktop\\\\school\\\\anul 3\\\\TD\\\\TD-front-back-BD\\\\CasinoAPI\\\\Frontend\\\\src\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// src/AuthContext.tsx\nimport React, { createContext, useState, useContext } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext({\n  isLoggedIn: false,\n  login: () => {},\n  logout: () => {},\n  user: undefined,\n  avatarUrl: undefined,\n  setAvatarUrl: () => {}\n});\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [user, setUser] = useState(undefined);\n  const [avatarUrl, setAvatarUrl] = useState(undefined);\n  const login = username => {\n    setIsLoggedIn(true);\n    setUser(username);\n\n    // Poți seta un avatar implicit la login, de exemplu:\n    setAvatarUrl(\"/images/avatars/default.png\");\n  };\n  const logout = () => {\n    setIsLoggedIn(false);\n    setUser(undefined);\n    setAvatarUrl(undefined);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      isLoggedIn,\n      login,\n      logout,\n      user,\n      avatarUrl,\n      setAvatarUrl\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"bTnMbnZ0pc6uqHUZ9MLxEUyKDXk=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  return useContext(AuthContext);\n};\n_s2(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","AuthContext","isLoggedIn","login","logout","user","undefined","avatarUrl","setAvatarUrl","AuthProvider","children","_s","setIsLoggedIn","setUser","username","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","$RefreshReg$"],"sources":["C:/Users/Stefan Robu/OneDrive/Desktop/school/anul 3/TD/TD-front-back-BD/CasinoAPI/Frontend/src/AuthContext.tsx"],"sourcesContent":["// src/AuthContext.tsx\r\nimport React, { createContext, useState, ReactNode, useContext } from \"react\";\r\n\r\ninterface AuthContextType {\r\n  isLoggedIn: boolean;\r\n  login: (username: string) => void;\r\n  logout: () => void;\r\n  user?: string;\r\n  avatarUrl?: string;                 // Avatarul curent (URL sau base64)\r\n  setAvatarUrl: (url: string) => void; // Funcție pentru schimbarea avatarului\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType>({\r\n  isLoggedIn: false,\r\n  login: () => {},\r\n  logout: () => {},\r\n  user: undefined,\r\n  avatarUrl: undefined,\r\n  setAvatarUrl: () => {},\r\n});\r\n\r\nexport const AuthProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\r\n  const [user, setUser] = useState<string | undefined>(undefined);\r\n  const [avatarUrl, setAvatarUrl] = useState<string | undefined>(undefined);\r\n\r\n  const login = (username: string) => {\r\n    setIsLoggedIn(true);\r\n    setUser(username);\r\n\r\n    // Poți seta un avatar implicit la login, de exemplu:\r\n    setAvatarUrl(\"/images/avatars/default.png\");\r\n  };\r\n\r\n  const logout = () => {\r\n    setIsLoggedIn(false);\r\n    setUser(undefined);\r\n    setAvatarUrl(undefined);\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ isLoggedIn, login, logout, user, avatarUrl, setAvatarUrl }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n"],"mappings":";;;AAAA;AACA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAaC,UAAU,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAW9E,MAAMC,WAAW,gBAAGL,aAAa,CAAkB;EACjDM,UAAU,EAAE,KAAK;EACjBC,KAAK,EAAEA,CAAA,KAAM,CAAC,CAAC;EACfC,MAAM,EAAEA,CAAA,KAAM,CAAC,CAAC;EAChBC,IAAI,EAAEC,SAAS;EACfC,SAAS,EAAED,SAAS;EACpBE,YAAY,EAAEA,CAAA,KAAM,CAAC;AACvB,CAAC,CAAC;AAEF,OAAO,MAAMC,YAA+C,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC/E,MAAM,CAACT,UAAU,EAAEU,aAAa,CAAC,GAAGf,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACQ,IAAI,EAAEQ,OAAO,CAAC,GAAGhB,QAAQ,CAAqBS,SAAS,CAAC;EAC/D,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAqBS,SAAS,CAAC;EAEzE,MAAMH,KAAK,GAAIW,QAAgB,IAAK;IAClCF,aAAa,CAAC,IAAI,CAAC;IACnBC,OAAO,CAACC,QAAQ,CAAC;;IAEjB;IACAN,YAAY,CAAC,6BAA6B,CAAC;EAC7C,CAAC;EAED,MAAMJ,MAAM,GAAGA,CAAA,KAAM;IACnBQ,aAAa,CAAC,KAAK,CAAC;IACpBC,OAAO,CAACP,SAAS,CAAC;IAClBE,YAAY,CAACF,SAAS,CAAC;EACzB,CAAC;EAED,oBACEN,OAAA,CAACC,WAAW,CAACc,QAAQ;IAACC,KAAK,EAAE;MAAEd,UAAU;MAAEC,KAAK;MAAEC,MAAM;MAAEC,IAAI;MAAEE,SAAS;MAAEC;IAAa,CAAE;IAAAE,QAAA,EACvFA;EAAQ;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACT,EAAA,CAxBWF,YAA+C;AAAAY,EAAA,GAA/CZ,YAA+C;AA0B5D,OAAO,MAAMa,OAAO,GAAGA,CAAA;EAAAC,GAAA;EAAA,OAAMzB,UAAU,CAACG,WAAW,CAAC;AAAA;AAACsB,GAAA,CAAxCD,OAAO;AAAA,IAAAD,EAAA;AAAAG,YAAA,CAAAH,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}